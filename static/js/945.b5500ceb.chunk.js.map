{"version":3,"file":"static/js/945.b5500ceb.chunk.js","mappings":"qRAEaA,EAAaC,EAAAA,EAAAA,GAAH,iGAMVC,EAAWD,EAAAA,EAAAA,GAAH,8T,SCkHrB,EAzDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaX,GAFlB,OAERK,EAFQ,OAGdC,EAAQD,GAGY,IAAhBA,EAAKO,QACPJ,GAAY,GAPA,gDAUdK,QAAQC,MAAR,MACAN,GAAY,GAXE,yDAAH,qDAcfE,GACD,GAAE,CAACV,IAGAO,GACFL,EAAS,MACF,oOAIP,+BACE,SAACL,EAAD,UACGQ,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACR,UAACpB,EAAD,YACE,gBACEqB,IAAG,UACDH,EACII,EAAAA,EAAkBJ,EAClBK,EAAAA,EAAc,SAAWJ,GAE/BK,IAAKL,KAEP,0BACE,sCADF,IACwBA,MAExB,0BACE,yCADF,IAC2BC,OAbdH,EADP,OAqBjB,C,+LCtHDQ,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,+CADM,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAQfG,EAAY,mCAAG,WAAM/B,GAAN,yFACHwB,EAAAA,EAAAA,IAAA,gBACZxB,EADY,oBACOyB,EADP,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZhB,EAAY,mCAAG,WAAMX,GAAN,yFACHwB,EAAAA,EAAAA,IAAA,gBACZxB,EADY,4BACeyB,EADf,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,EAAKtB,MALc,2CAAH,sDAOZ2B,EAAe,mCAAG,WAAMhC,GAAN,yFACNwB,EAAAA,EAAAA,IAAA,gBACZxB,EADY,4BACeyB,EADf,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,qD,6EClCrB,IAAMP,EAAkB,mCAClBC,EAAc,qC","sources":["components/Cast/Cast.module.jsx","components/Cast/Cast.jsx","services/getMovies.js","utils/constants.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledList = styled.ul`\n  margin-top: 12px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\nexport const ListItem = styled.li`\n  min-width: 182px;\n  font-size: 14px;\n  padding: 6px;\n  max-width: min-content;\n  background-color: #2a2a2a;\n  border-radius: 14px;\n\n  :not(:last-child) {\n    margin-bottom: 6px;\n  }\n\n  img {\n    max-width: 182px;\n    border-radius: 8px;\n  }\n  span {\n    color: #ffc700;\n  }\n`;\n","// import React, { useEffect, useState } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import { getCastMovie } from 'services/getMovies';\n// import { BASE_POSTER_URL, PLACEHOLDER } from 'utils/constants';\n// import { ListItem, StyledList } from '../Cast/Cast.module';\n\n// const Cast = () => {\n//   const { movieId } = useParams();\n//   const navigate = useNavigate();\n\n//   const [cast, setCast] = useState([]);\n//   const [notFound, setNotFound] = useState(false);\n\n//   useEffect(() => {\n//     const fetchCast = async () => {\n//       try {\n//         const cast = await getCastMovie(movieId);\n//         setCast(cast);\n//       } catch (e) {\n//         console.log(e);\n//         setNotFound(true);\n//       }\n//     };\n//     fetchCast();\n//   }, [movieId]);\n//   if (notFound) {\n//     navigate('/');\n//     return null;\n//   }\n\n//   return (\n//     <>\n//       <StyledList>\n//         {cast.map(({ id, profile_path, original_name, character }) => (\n//           <ListItem key={id}>\n//             <img\n//               src={`${\n//                 profile_path\n//                   ? BASE_POSTER_URL + profile_path\n//                   : PLACEHOLDER + '?text=' + original_name\n//               }`}\n//               alt={original_name}\n//             />\n//             <p>\n//               <span> Actor:</span> {original_name}\n//             </p>\n//             <p>\n//               <span>Character:</span> {character}\n//             </p>\n//           </ListItem>\n//         ))}\n//       </StyledList>\n//     </>\n//   );\n// };\n\n// export default Cast;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getCastMovie } from 'services/getMovies';\nimport { BASE_POSTER_URL, PLACEHOLDER } from 'utils/constants';\nimport { ListItem, StyledList } from '../Cast/Cast.module';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  const [cast, setCast] = useState([]);\n  const [notFound, setNotFound] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const cast = await getCastMovie(movieId);\n        setCast(cast);\n\n        // Якщо каст приходе пустим, встановіть прапорець notFound на true\n        if (cast.length === 0) {\n          setNotFound(true);\n        }\n      } catch (e) {\n        console.error(e);\n        setNotFound(true);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  // Перевірте, чи notFound встановлений на true, і виведіть повідомлення\n  if (notFound) {\n    navigate('/');\n    return <p>Перенаправлення на головну сторінку...</p>;\n  }\n\n  return (\n    <>\n      <StyledList>\n        {cast.map(({ id, profile_path, original_name, character }) => (\n          <ListItem key={id}>\n            <img\n              src={`${\n                profile_path\n                  ? BASE_POSTER_URL + profile_path\n                  : PLACEHOLDER + '?text=' + original_name\n              }`}\n              alt={original_name}\n            />\n            <p>\n              <span> Actor:</span> {original_name}\n            </p>\n            <p>\n              <span>Character:</span> {character}\n            </p>\n          </ListItem>\n        ))}\n      </StyledList>\n    </>\n  );\n};\n\nexport default Cast;\n\n\n\n\n\n\n\n\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3373af60a4ee1fe7510a1a61c11380e1';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const PLACEHOLDER = 'https://via.placeholder.com/182x273';"],"names":["StyledList","styled","ListItem","movieId","useParams","navigate","useNavigate","useState","cast","setCast","notFound","setNotFound","useEffect","fetchCast","getCastMovie","length","console","error","map","id","profile_path","original_name","character","src","BASE_POSTER_URL","PLACEHOLDER","alt","axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getMovieById","getReviewsMovie"],"sourceRoot":""}