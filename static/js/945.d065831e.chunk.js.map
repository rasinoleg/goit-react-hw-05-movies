{"version":3,"file":"static/js/945.d065831e.chunk.js","mappings":"qRAEaA,EAAaC,EAAAA,EAAAA,GAAH,iGAMVC,EAAWD,EAAAA,EAAAA,GAAH,8T,SC2GrB,EArDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaT,GAFlB,OAERG,EAFQ,OAGdC,EAAQD,GAGY,IAAhBA,EAAKO,OACPJ,GAAc,GAEdA,GAAc,GATF,gDAYdK,QAAQC,MAAR,MACAN,GAAc,GAbA,yDAAH,qDAiBfE,GACD,GAAE,CAACR,IAEGK,GACL,sCAEA,SAACR,EAAD,UACGM,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACR,UAAClB,EAAD,YACE,gBACEmB,IAAG,UACDH,EACII,EAAAA,EAAkBJ,EAClBK,EAAAA,EAAc,SAAWJ,GAE/BK,IAAKL,KAEP,0BACE,sCADF,IACwBA,MAExB,0BACE,yCADF,IAC2BC,OAbdH,EADP,KAoBf,C,+LC/GDQ,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,+CADM,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAQfG,EAAY,mCAAG,WAAM7B,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,oBACOuB,EADP,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZhB,EAAY,mCAAG,WAAMT,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeuB,EADf,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,EAAKtB,MALc,2CAAH,sDAOZ2B,EAAe,mCAAG,WAAM9B,GAAN,yFACNsB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeuB,EADf,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,qD,6EClCrB,IAAMP,EAAkB,mCAClBC,EAAc,qC","sources":["components/Cast/Cast.module.jsx","components/Cast/Cast.jsx","services/getMovies.js","utils/constants.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledList = styled.ul`\n  margin-top: 12px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\nexport const ListItem = styled.li`\n  min-width: 182px;\n  font-size: 14px;\n  padding: 6px;\n  max-width: min-content;\n  background-color: #2a2a2a;\n  border-radius: 14px;\n\n  :not(:last-child) {\n    margin-bottom: 6px;\n  }\n\n  img {\n    max-width: 182px;\n    border-radius: 8px;\n  }\n  span {\n    color: #ffc700;\n  }\n`;\n","// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { getCastMovie } from 'services/getMovies';\n// import { BASE_POSTER_URL, PLACEHOLDER } from 'utils/constants';\n// import { ListItem, StyledList } from '../Cast/Cast.module';\n\n// const Cast = () => {\n//   const { movieId } = useParams();\n\n//   const [cast, setCast] = useState([]);\n//   const [showNoCast, setShowNoCast] = useState(false);\n\n//   useEffect(() => {\n//     const fetchCast = async () => {\n//       try {\n//         const cast = await getCastMovie(movieId);\n//         setCast(cast);\n//         setShowNoCast(false);\n//       } catch (e) {\n//         console.error(e);\n//         setShowNoCast(true);\n//       }\n//     };\n\n//     fetchCast();\n//   }, [movieId]);\n\n//   return Cast.length === 0 ? (\n//     <h3>No Cast.</h3>\n//       ) : (\n//         <StyledList>\n//           {cast.map(({ id, profile_path, original_name, character }) => (\n//             <ListItem key={id}>\n//               <img\n//                 src={`${\n//                   profile_path\n//                     ? BASE_POSTER_URL + profile_path\n//                     : PLACEHOLDER + '?text=' + original_name\n//                 }`}\n//                 alt={original_name}\n//               />\n//               <p>\n//                 <span> Actor:</span> {original_name}\n//               </p>\n//               <p>\n//                 <span>Character:</span> {character}\n//               </p>\n//             </ListItem>\n//           ))}\n//         </StyledList>\n//   );\n// };\n\n// export default Cast;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastMovie } from 'services/getMovies';\nimport { BASE_POSTER_URL, PLACEHOLDER } from 'utils/constants';\nimport { ListItem, StyledList } from '../Cast/Cast.module';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [showNoCast, setShowNoCast] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const cast = await getCastMovie(movieId);\n        setCast(cast);\n\n        // Показуємо \"No Cast\", якщо дані акторів порожні\n        if (cast.length === 0) {\n          setShowNoCast(true);\n        } else {\n          setShowNoCast(false);\n        }\n      } catch (e) {\n        console.error(e);\n        setShowNoCast(true);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return showNoCast ? (\n    <h3>No Cast.</h3>\n  ) : (\n    <StyledList>\n      {cast.map(({ id, profile_path, original_name, character }) => (\n        <ListItem key={id}>\n          <img\n            src={`${\n              profile_path\n                ? BASE_POSTER_URL + profile_path\n                : PLACEHOLDER + '?text=' + original_name\n            }`}\n            alt={original_name}\n          />\n          <p>\n            <span> Actor:</span> {original_name}\n          </p>\n          <p>\n            <span>Character:</span> {character}\n          </p>\n        </ListItem>\n      ))}\n    </StyledList>\n  );\n};\n\nexport default Cast;\n\n\n\n// function olegСar(objCar) {\n//   Object.entries(objCar).forEach(([key, value]) => {\n//     console.log(`${key} => ${value}`);\n//   });\n// }\n// const Car = {\n//   model: \"Mitsubishi Outlander\",\n//   year: 2016,\n//   color: \"White\",\n//   power: 167\n// };\n// Car.cost = 20000;\n// delete Car.year;\n\n\n// olegСar(Car);\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3373af60a4ee1fe7510a1a61c11380e1';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const PLACEHOLDER = 'https://via.placeholder.com/182x273';"],"names":["StyledList","styled","ListItem","movieId","useParams","useState","cast","setCast","showNoCast","setShowNoCast","useEffect","fetchCast","getCastMovie","length","console","error","map","id","profile_path","original_name","character","src","BASE_POSTER_URL","PLACEHOLDER","alt","axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getMovieById","getReviewsMovie"],"sourceRoot":""}